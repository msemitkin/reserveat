openapi: 3.0.0
info:
  title: Reserveat API
  version: 1.0.0
  description: API for reserving tables in the restaurants using Reserveat
servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
paths:
  /restaurants:
    post:
      tags:
        - Restaurant
      summary: Create a new restaurant
      operationId: createRestaurant
      requestBody:
        description: Restaurant details
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/RestaurantInput.yaml'
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/RestaurantOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
  /restaurants/{restaurantId}:
    get:
      tags:
        - Restaurant
      operationId: getRestaurant
      summary: Get a restaurant by ID
      description: Returns a restaurant by ID
      parameters:
        - name: restaurantId
          in: path
          description: ID of the restaurant to retrieve
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Restaurant retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/RestaurantOutput.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    put:
      summary: Edit a restaurant
      description: Update information for an existing restaurant.
      operationId: updateRestaurant
      tags:
        - Restaurant
      parameters:
        - name: restaurantId
          in: path
          description: ID of the restaurant to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/RestaurantInput.yaml'
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/RestaurantOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    delete:
      tags:
        - Restaurant
      operationId: deleteRestaurant
      summary: Delete a restaurant
      description: Deletes a restaurant and all its locations
      parameters:
        - name: restaurantId
          in: path
          description: ID of the restaurant to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Deleted
        '401':
          $ref: './components/responses/Unauthorized.yaml'
  /restaurants/{restaurantId}/locations:
    post:
      operationId: createLocation
      summary: Create a new location to a restaurant
      tags:
        - Location
      parameters:
        - in: path
          name: restaurantId
          description: ID of the restaurant to which the location will be added
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/LocationInput.yaml'
      responses:
        '201':
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/LocationOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
  /locations/{locationId}:
    get:
      summary: Get location details by ID
      operationId: getLocationById
      tags:
        - Location
      parameters:
        - in: path
          name: locationId
          description: ID of the location to get
          required: true
          schema:
            type: integer
          example: 456
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './components/schemas/LocationOutput.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    put:
      summary: Update location details by ID
      operationId: updateLocation
      tags:
        - Location
      parameters:
        - in: path
          name: locationId
          description: ID of the location to update
          required: true
          schema:
            type: integer
          example: 456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/LocationInput.yaml'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './components/schemas/LocationOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    delete:
      summary: Delete a location for a restaurant
      operationId: deleteLocation
      tags:
        - Location
      parameters:
        - in: path
          name: locationId
          description: ID of the location to delete
          required: true
          schema:
            type: integer
          example: 456
      responses:
        '204':
          description: Location deleted successfully
        '401':
          $ref: './components/responses/Unauthorized.yaml'
  /locations/{locationId}/photos:
    post:
      tags:
        - Photo
      operationId: addPhotoToLocation
      summary: Add a photo to a location
      description: Add a photo to a location in a restaurant
      parameters:
        - in: path
          name: locationId
          description: ID of the location
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Successfully added photo to the location
          content:
            application/json:
              schema:
                $ref: './components/schemas/PhotoOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    get:
      tags:
        - Photo
      operationId: getLocationPhotos
      summary: Get all photos for a location.
      parameters:
        - in: path
          name: locationId
          required: true
          description: ID of the location.
          schema:
            type: integer
      responses:
        '200':
          description: List of photos for the location.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/schemas/PhotoOutput.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
  /locations/nearby:
    get:
      tags:
        - Location
      operationId: getNearbyLocations
      summary: Get nearby locations
      parameters:
        - name: latitude
          in: query
          required: true
          description: Latitude of the user's location
          schema:
            type: number
            format: float
            example: 37.7749
        - name: longitude
          in: query
          required: true
          description: Longitude of the user's location
          schema:
            type: number
            format: float
            example: -122.4194
        - name: radius
          in: query
          required: false
          description: Radius in meters
          schema:
            type: integer
            format: int32
            example: 1000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './components/schemas/LocationsWithRestaurantOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
  /tables/locations/{locationId}:
    post:
      tags:
        - Table
      summary: Create a table at a location
      description: Adds a new table with the given number of seats to the specified location.
      operationId: createTable
      parameters:
        - name: locationId
          in: path
          description: ID of the location where the table will be created
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/TableInput.yaml'
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/TableOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
  /reservations/tables/{tableId}:
    post:
      summary: Create a reservation for a table at the specified location
      operationId: createReservation
      tags:
        - Reservation
      parameters:
        - in: path
          name: tableId
          required: true
          description: ID of the table
          schema:
            type: integer
      requestBody:
        description: Request body for creating a reservation
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/ReservationInput.yaml'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: './components/schemas/ReservationOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
        '409':
          $ref: './components/responses/ReservationConflict.yaml'

  /reservations/{reservationId}:
    get:
      summary: Get a reservation by ID
      operationId: getReservationById
      tags:
        - Reservation
      parameters:
        - name: reservationId
          in: path
          description: ID of the reservation to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './components/schemas/ReservationOutput.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
    delete:
      summary: Delete a reservation
      operationId: deleteReservation
      tags:
        - Reservation
      parameters:
        - in: path
          name: reservationId
          description: ID of the reservation to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Reservation deleted successfully
        '404':
          $ref: './components/responses/NotFound.yaml'
  /tables/{locationId}:
    get:
      tags:
        - Table
      operationId: getLocationTables
      summary: Get all tables by locationId
      parameters:
        - in: path
          name: locationId
          required: true
          description: The ID of the location to get tables for
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/schemas/TableOutput.yaml'
        '400':
          $ref: './components/responses/BadRequest.yaml'
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
  /photos/{photoId}:
    delete:
      summary: Delete a photo by ID
      operationId: deletePhoto
      tags:
        - Photo
      parameters:
        - in: path
          name: photoId
          required: true
          description: Id of the photo to delete
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted the photo
        '401':
          $ref: './components/responses/Unauthorized.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
  /locations/{locationId}/free-slots:
    get:
      summary: get free slots for a location
      tags:
        - Reservation
      operationId: getFreeSlots
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: query
          name: date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/schemas/FreeSlotsOutput.yaml'
        '404':
          $ref: './components/responses/NotFound.yaml'
  /locations:
    get:
      summary: Get locations by criteria
      tags:
        - Location
      operationId: getLocationsByCriteria
      parameters:
        - in: query
          name: criteria
          schema:
            type: object
            properties:
              visitors:
                type: integer
                minimum: 1
              name:
                type: string
              dateTimeFrom:
                type: string
                format: date-time
              dateTimeTo:
                type: string
                format: date-time
            required:
              - dateTimeFrom
              - dateTimeTo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './components/schemas/LocationsWithRestaurantOutput.yaml'
